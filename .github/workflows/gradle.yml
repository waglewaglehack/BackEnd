# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/waggle .
          docker push ${{ secrets.DOCKER_USERNAME }}/waggle

      #      # docker build & push to develop
      #      - name: Docker build & push to dev
      #        if: contains(github.ref, 'develop')
      #        run: |
      #          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      #          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-dev .
      #          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-dev

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST }} # EC2 퍼블릭 IPv4
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          envs: GITHUB_SHA
          script: |
            sudo docker stop ${{ secrets.DOCKER_REPOSITORY }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/waggle
            sudo docker run -d -p 8080:8080 -e DB_URL=${{ secrets.DB_URL }} -e DB_USER=${{ secrets.DB_USER }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} --name waggle ${{ secrets.DOCKER_USERNAME }}/waggle
            sudo docker image prune -f

#      ## deploy to develop
#      - name: Deploy to dev
#        uses: appleboy/ssh-action@master
#        id: deploy-dev
#        if: contains(github.ref, 'develop')
#        with:
#          host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
#          username: ${{ secrets.USERNAME }} # ubuntu
#          password: ${{ secrets.PASSWORD }}
#          port: 22
#          key: ${{ secrets.PRIVATE_KEY }}
#          script: |
#            sudo docker ps
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
#            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/docker-test-dev
#            sudo docker image prune -f